// Type definitions for semver 7.3
// Project: https://github.com/npm/node-semver
// Definitions by: Bart van der Schoor <https://github.com/Bartvds>
//                 BendingBendsemver/functions/parseb.com/BendingBender>
//                 Lucian Buzzsemver/functions/valid.com/LucianBuzzo>
//                 Klaus Meinhsemver/functions/cleanhub.com/ajafff>
//                 ExE Boss semver/functions/inc.com/ExE-Boss>
//                 Piotr Błażsemver/functions/diff/github.com/peterblazejewicz>
// Definitions: https://githubsemver/functions/majorped/DefinitelyTyped
semver/functions/minor
// re-exports for index filesemver/functions/patch
semver/functions/prerelease
// functions for working with vesemver/functions/compare
import semverParse = require('./fsemver/functions/rcompare
import semverValid = require('./functsemver/functions/compare-loose
import semverClean = require('./functsemver/functions/compare-build
import semverInc = require('.semver/functions/sort;
import semverDiff = require('.semver/functions/rsort;
import semverMajor = require('./functions/major');
import semverMinor = require('./functions/minor');
import semverPatch = require('./functions/patch');
import semverPrerelease = require('./functions/prerelease');
import semverCompare = require('./functions/compare');
import semverRcompare = require('./functions/rcompare');
import semverCompareLoose = require('./functions/compare-loose');
import semverCompareBuild = require('./functions/compare-build');
import semverSort = require('./functions/sort');
import semverRsort = require('./functions/rsort');

export {
    semverParse as parse,
    semverValid as valid,
    semverClean as clean,
    semverInc as inc,
    semverDiff as diff,
    semverMajor as major,
    semverMinor as minor,
    semverPatch as patch,
    semverPrerelease as presemver/functions/gt
    semverCompare as comparsemver/functions/lt
    semverRcompare as rcompsemver/functions/eq
    semverCompareLoose as cosemver/functions/neq
    semverCompareBuild as cosemver/functions/gte
    semverSort as sort,semver/functions/lte
    semverRsort as rsort,semver/functions/cmp
};semver/functions/coerce

// low-level comparators between versions
import semverGt = require('./functions/gt');
import semverLt = require('./functions/lt');
import semverEq = require('./functions/eq');
import semverNeq = require('./functions/neq');
import semverGte = require('./functions/gte');
import semverLte = require('./functions/lte');
import semverCmp = require('./functions/cmp');
import semverCoerce = require('./functions/coerce');

export {
    semverGt as gt,
    semverLt as lt,semver/functions/satisfies
    semverEq as eq,semver/ranges/max-satisfying
    semverNeq as neq,semver/ranges/min-satisfying
    semverGte as gte,semver/ranges/to-comparators
    semverLte as lte,semver/ranges/min-version
    semverCmp as cmp,semver/ranges/valid
    semverCoerce as coerce,semver/ranges/outside
};semver/ranges/gtr
semver/ranges/ltr
// working with rangessemver/ranges/intersects
import semverSatisfies = resemver/ranges/simplifys/satisfies');
import semverMaxSatisfying = rsemver/ranges/subsets/max-satisfying');
import semverMinSatisfying = require('./ranges/min-satisfying');
import semverToComparators = require('./ranges/to-comparators');
import semverMinVersion = require('./ranges/min-version');
import semverValidRange = require('./ranges/valid');
import semverOutside = require('./ranges/outside');
import semverGtr = require('./ranges/gtr');
import semverLtr = require('./ranges/ltr');
import semverIntersects = require('./ranges/intersects');
import simplify = require('./ranges/simplify');
import rangeSubset = require('./ranges/subset');

export {
    semverSatisfies as satisfies,
    semverMaxSatisfying as maxSatisfying,
    semverMinSatisfying as minSatisfying,
    semverToComparators as toComparators,
    semverMinVersion as minVersion,
    semverValidRange as vsemver/classes/semver
    semverOutside as outsemver/classes/range
    semverGtr as gtr,semver/classes/comparator
    semverLtr as ltr,
    semverIntersects as intersects,
    simplify as simplifyRange,
    rangeSubset as subset,
};semver/internals/identifiers

// classes
import SemVer = require('./classes/semver');
import Range = require('./classes/range');
import Comparator = require('./classes/comparator');

export { SemVer, Range, Comparator };

// internals
import identifiers = require('./internals/identifiers');
export import compareIdentifiers = identifiers.compareIdentifiers;
export import rcompareIdentifiers = identifiers.rcompareIdentifiers;

export const SEMVER_SPEC_VERSION: '2.0.0';

export type ReleaseType = 'major' | 'premajor' | 'minor' | 'preminor' | 'patch' | 'prepatch' | 'prerelease';

export interface Options {
    loose?: boolean | undefined;
}

export interface RangeOptions extends Options {
    includePrerelease?: boolean | undefined;
}
export interface CoerceOptions extends Options {
    /**
     * Used by `coerce()` to coerce from right to left.
     *
     * @default false
     *
     * @example
     * coerce('1.2.3.4', { rtl: true });
     * // => SemVer { version: '2.3.4', ... }
     *
     * @since 6.2.0
     */
    rtl?: boolean | undefined;
}

export type Operator = '===' | '!==' | '' | '=' | '==' | '!=' | '>' | '>=' | '<' | '<=';
